// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/event.dart';
import 'models/task.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 468449231362220322),
    name: 'Task',
    lastPropertyId: const obx_int.IdUid(10, 3243690471553050648),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8093212342014311322),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 9094348588904921791),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2328856026507309630),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6612943433681691391),
        name: 'dueDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8152840397062716772),
        name: 'isCompleted',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6484922951188646889),
        name: 'timeInMinutes',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1266629711658065376),
        name: 'isRelative',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1027129045440359610),
        name: 'solarEvent',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 985334321720459810),
        name: 'offsetMinutes',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 3243690471553050648),
        name: 'repeatOptionsJson',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 1605140794853216812),
    name: 'Event',
    lastPropertyId: const obx_int.IdUid(7, 2258552147186283000),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8397671016909546584),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1092868754238887689),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5726923690447389429),
        name: 'note',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6915768372221703995),
        name: 'timeStart',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6306992322482702600),
        name: 'timeEnd',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8451483078526046849),
        name: 'dateStart',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2258552147186283000),
        name: 'dateEnd',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 1605140794853216812),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Task: obx_int.EntityDefinition<Task>(
      model: _entities[0],
      toOneRelations: (Task object) => [],
      toManyRelations: (Task object) => {},
      getId: (Task object) => object.id,
      setId: (Task object, int id) {
        object.id = id;
      },
      objectToFB: (Task object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final descriptionOffset = fbb.writeString(object.description);
        final solarEventOffset = object.solarEvent == null
            ? null
            : fbb.writeString(object.solarEvent!);
        final repeatOptionsJsonOffset = object.repeatOptionsJson == null
            ? null
            : fbb.writeString(object.repeatOptionsJson!);
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, titleOffset);
        fbb.addOffset(2, descriptionOffset);
        fbb.addInt64(3, object.dueDate.millisecondsSinceEpoch);
        fbb.addBool(4, object.isCompleted);
        fbb.addInt64(5, object.timeInMinutes);
        fbb.addBool(6, object.isRelative);
        fbb.addOffset(7, solarEventOffset);
        fbb.addInt64(8, object.offsetMinutes);
        fbb.addOffset(9, repeatOptionsJsonOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final dueDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
        );
        final isCompletedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          12,
          false,
        );
        final timeInMinutesParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final isRelativeParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          16,
          false,
        );
        final solarEventParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final offsetMinutesParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          20,
        );
        final object =
            Task(
                id: idParam,
                title: titleParam,
                description: descriptionParam,
                dueDate: dueDateParam,
                isCompleted: isCompletedParam,
                timeInMinutes: timeInMinutesParam,
                isRelative: isRelativeParam,
                solarEvent: solarEventParam,
                offsetMinutes: offsetMinutesParam,
              )
              ..repeatOptionsJson = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGetNullable(buffer, rootOffset, 22);

        return object;
      },
    ),
    Event: obx_int.EntityDefinition<Event>(
      model: _entities[1],
      toOneRelations: (Event object) => [],
      toManyRelations: (Event object) => {},
      getId: (Event object) => object.id,
      setId: (Event object, int id) {
        object.id = id;
      },
      objectToFB: (Event object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final noteOffset = object.note == null
            ? null
            : fbb.writeString(object.note!);
        final timeStartOffset = fbb.writeString(object.timeStart);
        final timeEndOffset = fbb.writeString(object.timeEnd);
        final dateStartOffset = fbb.writeString(object.dateStart);
        final dateEndOffset = fbb.writeString(object.dateEnd);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, titleOffset);
        fbb.addOffset(2, noteOffset);
        fbb.addOffset(3, timeStartOffset);
        fbb.addOffset(4, timeEndOffset);
        fbb.addOffset(5, dateStartOffset);
        fbb.addOffset(6, dateEndOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final noteParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final timeStartParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final timeEndParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final dateStartParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final dateEndParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final object = Event(
          title: titleParam,
          note: noteParam,
          timeStart: timeStartParam,
          timeEnd: timeEndParam,
          dateStart: dateStartParam,
          dateEnd: dateEndParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Task] entity fields to define ObjectBox queries.
class Task_ {
  /// See [Task.id].
  static final id = obx.QueryIntegerProperty<Task>(_entities[0].properties[0]);

  /// See [Task.title].
  static final title = obx.QueryStringProperty<Task>(
    _entities[0].properties[1],
  );

  /// See [Task.description].
  static final description = obx.QueryStringProperty<Task>(
    _entities[0].properties[2],
  );

  /// See [Task.dueDate].
  static final dueDate = obx.QueryDateProperty<Task>(
    _entities[0].properties[3],
  );

  /// See [Task.isCompleted].
  static final isCompleted = obx.QueryBooleanProperty<Task>(
    _entities[0].properties[4],
  );

  /// See [Task.timeInMinutes].
  static final timeInMinutes = obx.QueryIntegerProperty<Task>(
    _entities[0].properties[5],
  );

  /// See [Task.isRelative].
  static final isRelative = obx.QueryBooleanProperty<Task>(
    _entities[0].properties[6],
  );

  /// See [Task.solarEvent].
  static final solarEvent = obx.QueryStringProperty<Task>(
    _entities[0].properties[7],
  );

  /// See [Task.offsetMinutes].
  static final offsetMinutes = obx.QueryIntegerProperty<Task>(
    _entities[0].properties[8],
  );

  /// See [Task.repeatOptionsJson].
  static final repeatOptionsJson = obx.QueryStringProperty<Task>(
    _entities[0].properties[9],
  );
}

/// [Event] entity fields to define ObjectBox queries.
class Event_ {
  /// See [Event.id].
  static final id = obx.QueryIntegerProperty<Event>(_entities[1].properties[0]);

  /// See [Event.title].
  static final title = obx.QueryStringProperty<Event>(
    _entities[1].properties[1],
  );

  /// See [Event.note].
  static final note = obx.QueryStringProperty<Event>(
    _entities[1].properties[2],
  );

  /// See [Event.timeStart].
  static final timeStart = obx.QueryStringProperty<Event>(
    _entities[1].properties[3],
  );

  /// See [Event.timeEnd].
  static final timeEnd = obx.QueryStringProperty<Event>(
    _entities[1].properties[4],
  );

  /// See [Event.dateStart].
  static final dateStart = obx.QueryStringProperty<Event>(
    _entities[1].properties[5],
  );

  /// See [Event.dateEnd].
  static final dateEnd = obx.QueryStringProperty<Event>(
    _entities[1].properties[6],
  );
}
